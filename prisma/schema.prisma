// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  username      String?
  email         String?   @unique
  password      String    @db.VarChar(250)
  emailVerified DateTime?
  image         String?
  userRole      String?   @default("user")
  accounts      Account[]
  sessions      Session[]
  // posts         Content[]
}

model Vendor {
  id            String    @id @default(cuid())
  username      String?
  email         String?   @unique
  password      String    @db.VarChar(250)
  emailVerified DateTime?
  image         String?
  userRole      String?   @default("user")
  Books         Book[]
}

model Content {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  // author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

enum Genre {
  ACTION
  COMEDY
  PHIL
  GENERIC
}

model Book {
  isbn          Int      @id @unique
  title         String
  author        String
  createdAt     DateTime @default(now())
  publishedDate String
  description   String
  genre         Genre    @default(GENERIC)
  language      String
  
  // vendor Vendor? @relation(references: [id], fields: [vendorID])

  Vendor   Vendor? @relation(fields: [vendorId], references: [id])
  vendorId String?
}
